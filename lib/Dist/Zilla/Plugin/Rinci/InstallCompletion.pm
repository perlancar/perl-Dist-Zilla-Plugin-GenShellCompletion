package Dist::Zilla::Plugin::Rinci::InstallCompletion;

# DATE
# VERSION

use 5.008001;
use strict;
use warnings;
use utf8;

use Moose;
use namespace::autoclean;

use List::Util qw(first);
use String::ShellQuote;

with (
    'Dist::Zilla::Role::InstallTool',
    'Dist::Zilla::Role::FileFinderUser' => {
        default_finders => [':ExecFiles'],
    },
);

sub setup_installer {
  my ($self) = @_;

  # first, try MakeMaker
  my $build_script = first { $_->name eq 'Makefile.PL' }
      @{ $self->zilla->files };
  $self->log_fatal('No Makefile.PL found. Using [MakeMaker] is required')
      unless $build_script;

  my $content = $build_script->content;

  no strict 'refs';
  my $header = "
# modify generated Makefile to install bash completion for scripts. this piece\n".
"# is generated by " . __PACKAGE__ . " version " .
    (${__PACKAGE__ ."::VERSION"} // 'dev').".\n";

  my $body = <<'_';
INSTALL_COMPLETION:
{
    print "Modifying Makefile to install bash completion on install\n";
    open my($fh), "<", "Makefile" or die "Can't open generated Makefile: $!";
    my $content = do { local $/; ~~<$fh> };

    $content =~ s/^(install :: pure_install doc_install)/$1 comp_install/m
        or die "Can't find pattern in Makefile (1)";

    $content =~ s/^(uninstall :: .+)/$1 comp_uninstall/m
        or die "Can't find pattern in Makefile (2)";

    $content .= qq|\ncomp_install :\n\t| .
        q|$(PERLRUN) -MFile::Which -E'$$path=which("bash-completion-prog"); if ($$path) { system $$path, "--verbose", @ARGV }' -- $(EXE_FILES)| .
        qq|\n\n|;

    $content .= qq|\ncomp_uninstall :\n\t| .
        q|$(PERLRUN) -MFile::Which -E'$$path=which("bash-completion-prog"); if ($$path) { system $$path, "--remove", "--verbose", @ARGV }' -- $(EXE_FILES)| .
        qq|\n\n|;

    open $fh, ">", "Makefile" or die "Can't write modified Makefile: $!";
    print $fh $content;
}
_

  $content .= $header . $body;

  return $build_script->content($content);
}

no Moose;
1;
# ABSTRACT: Install bash completion for scripts when distribution is installed

=for Pod::Coverage setup_installer

=head1 SYNOPSIS

In your dist.ini:

 [Rinci::InstallCompletion]


=head1 DESCRIPTION

If your command-line scripts uses L<Perinci::CmdLine> (or its variant
L<Perinci::CmdLine::Lite> or L<Perinci::CmdLine::Any>), you can use this plugin
so that when a user installs your distribution with C<make install>,
L<bash-completion-prog> is invoked to add C<complete> bash command for your
scripts. This is convenient because at the next shell they start, bash tab
completion is already activated for your scripts.

Some notes:

User must already install L<App::BashCompletionProg> to manage their completion
scripts in C<~/.bash-completion-prog> (or C</etc/bash-completion-prog>) and
already call/source this file in their bash startup shell. (But if
App::BashCompletionProg is installed after your distribution is installed, user
can simply run C<bash-completion-prog> to scan PATH and add completion for all
Perinci::CmdLine-based scripts, including yours.)

This plugin's implementation strategy is currently as follow (probably hackish):
insert some code in the generated C<Makefile.PL> after C<WriteMakefile()> to
insert some targets in the C<Makefile> generated by C<Makefile.PL>.

Currently only MakeMaker is supported, L<Module::Build> is not.


=head1 SEE ALSO

L<App::BashCompletionProg>

=cut
