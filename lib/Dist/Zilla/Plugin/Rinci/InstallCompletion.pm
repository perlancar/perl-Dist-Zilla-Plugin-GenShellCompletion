package Dist::Zilla::Plugin::Rinci::InstallCompletion;

# DATE
# VERSION

use 5.008001;
use strict;
use warnings;
use utf8;

use Moose;
use namespace::autoclean;

with (
    'Dist::Zilla::Role::InstallTool',
    'Dist::Zilla::Role::FileFinderUser' => {
        default_finders => [':ExecFiles'],
    },
);

sub setup_installer {
  my ($self) = @_;

  use DD; dd [$self->found_files];

  # first, try MakeMaker
  my $build_script = first { $_->name eq 'Makefile.PL' }
      @{ $self->zilla->files };
  $self->log_fatal('No Makefile.PL found. Using [MakeMaker] is required')
      unless $build_script;

  #$self->log_fatal('No Makefile.PL found. Using [MakeMaker] or [ModuleBuild] is required');
  #if (!$build_script) {
  #  $build_script = first { $_->name eq 'Build.PL' } @{ $self->zilla->files };

  my $content = $build_script->content;

  #$content =~ s/(?=$reg)/$prereq_str/
  #  or $self->log_fatal("Failed to insert conditional prereq for $os");

  return $build_script->content($content);
}

no Moose;
1;
# ABSTRACT: Install bash completion for scripts when distribution is installed

=for Pod::Coverage setup_installer

=head1 SYNOPSIS

In your dist.ini:

 [Rinci::InstallCompletion]


=head2 DESCRIPTION

If your command-line scripts uses L<Perinci::CmdLine> (or its variant
L<Perinci::CmdLine::Lite> or L<Perinci::CmdLine::Any>), you can use this plugin
so that when users install your distribution with C<make install>,
L<bash-completion-f> is invoked to add C<complete> bash command. This is
convenient because at the next shell they start, bash tab completion is already
activated for your scripts.

Some notes:

User must already install L<App::BashCompletionF> to manage their completion
scripts in C<~/.bash-completion-f> (or C</etc/bash-completion-f>) and already
call/source this file in their bash startup shell. (But if App::BashCompletionF
is installed after your distribution is installed, user can run
C<bash-completion-f add-all-pc> to scan PATH and add completion for all
Perinci::CmdLine-based scripts, including yours.)

This plugin's implementation strategy is currently as follow (probably hackish):
insert some code in the generated C<Makefile.PL> after C<WriteMakefile()> to
insert some targets in the C<Makefile> generated by C<Makefile.PL>.

Currently only MakeMaker is supported, Module::Build is not.

=cut
